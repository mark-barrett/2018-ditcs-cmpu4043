{"version":3,"sources":["constants/routes.js","components/Errors.js","components/Firebase/context.js","firebase/firebase.js","components/Firebase/index.js","components/SignUp/index.js","components/Login/index.js","components/SignOut/index.js","components/NavBar/index.js","components/CreateGroup/index.js","components/Users/index.js","components/Message/index.js","components/ChatWindow/index.js","components/Session/context.js","components/Session/withAuthentication.js","components/Session/withAuthorization.js","components/Chat/index.js","App.js","serviceWorker.js","index.js"],"names":["CHAT","Errors","errors","this","props","react_default","a","createElement","className","message","createErrors","Component","FirebaseContext","React","createContext","withFirebase","Consumer","firebase","Object","assign","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","_this","classCallCheck","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","user","uid","db","ref","concat","users","messages","messageId","group","app","initializeApp","database","INITIAL_FORM_STATE","username","confirmPassword","SignUpFormBase","possibleConstructorReturn","getPrototypeOf","call","onChange","event","setState","defineProperty","target","name","value","onSubmit","_this$state","state","confirmPassowrd","then","authUser","set","objectSpread","history","push","ROUTES","catch","error","preventDefault","components_Errors","htmlFor","id","type","href","SignUpForm","withRouter","SignUp","LoginFormBase","LoginForm","Login","_ref","onClick","NavBar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","loggedInAs","components_SignOut","CreateGroup","createGroup","groupName","groupMembers","members","createGroupOpen","createGroupChange","i","l","options","length","selected","loggedInAsID","createGroupButtonClicked","bind","assertThisInitialized","style","borderRadius","class","placeholder","multiple","map","Users","groups","loading","currentlySelectedUser","_this2","orderByChild","on","snapshot","usersObject","val","keys","key","filter","groupsObject","groupId","includes","off","_this3","marginRight","paddingRight","components_CreateGroup","changeWhoUserIsChattingTo","Message","deleteMessage","currentTarget","remove","from","body","sentAt","INITIAL_STATE","userMessages","ChatWindow","sendMessage","to","Date","toLocaleString","messagesObject","marginLeft","paddingLeft","console","log","startsWith","components_Message","AuthUserContext","withAuthentication","WithAuthentication","_React$Component","inherits","createClass","listener","onAuthStateChanged","Session_context","Provider","withAuthorization","condition","WithAuthorization","apply","arguments","compose","Chat","components_NavBar","components_Users","components_ChatWindow","loggedInAsUsername","require","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","context","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6d38ed5.chunk.js","sourcesContent":["export const LOGIN = '/';\nexport const SIGN_UP = '/signup';\nexport const CHAT = '/chat';","import React, { Component } from 'react'\n\nclass Errors extends Component {\n\n    createErrors() {\n        let errors = []\n        if(this.props.errors != null) {\n            errors = <div className=\"alert alert-secondary\"><div className=\"text-center\">{this.props.errors.message}</div></div>;\n        }\n        return errors;\n    }\n\n    render () {\n        return (\n            <div>\n                {this.createErrors()}\n            </div>\n        )\n    }\n}\n\nexport default Errors","// This is used to instaniate Firebase once rather than\n// a per class basis\nimport React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\n// Create withFirebase, which will basically wrap any component with Firebase\nexport const withFirebase = Component => props => (\n    <FirebaseContext.Consumer>\n        {firebase => <Component {...props} firebase={firebase}/>}\n    </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;","import app from 'firebase/app'\nimport 'firebase/auth';\nimport 'firebase/database';\nimport { fromRenderProps } from 'recompose';\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(config);\n\n        // Enable Firebase auth\n        this.auth = app.auth();\n\n        // Get the db\n        this.db = app.database();\n    }\n    \n    // Sign up\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n\n    // Sign in\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    // Sign out\n    doSignOut = () =>\n        this.auth.signOut();\n    \n    // Create a user\n    user = uid => this.db.ref(`users/${uid}`);\n\n    // Return the users\n    users = () => this.db.ref('users');\n\n    // Create a message\n    messages = () => this.db.ref('messages');\n\n    // For deleting a message\n    message = messageId => this.db.ref(`messages/${messageId}`);\n\n    // Create a group\n    group = () => this.db.ref('groups');\n}\n\n\nexport default Firebase;","import FirebaseContext, { withFirebase } from './context';\nimport Firebase from '../../firebase/firebase';\n\nexport default Firebase;\n\nexport { FirebaseContext, withFirebase };","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nimport * as ROUTES from '../../constants/routes';\n\nimport Errors from '../Errors';\n\n// Import high order component to wrap the component to have Firebase\nimport { withFirebase } from '../Firebase';\n\n// Create a constant with SignUpForm in it, as if the its a component\nconst SignUp = () => (\n    <div>\n        <SignUpForm />\n    </div>\n)\n\nconst INITIAL_FORM_STATE = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n}\n\n// Define the SignUpForm as a base\nclass SignUpFormBase extends Component {\n    constructor(props) {\n        super(props);\n\n        // Set the state at the start to the INITIAL_STATE values\n        this.state = { ...INITIAL_FORM_STATE };\n    }\n\n    // On change method for the form below\n    onChange = event => {\n        // Set the state of whatever the name of the even is (i.e the input name)\n        // To the value entered in it\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    // When the form is submitted \n    onSubmit = event => {\n        // Get the current values of the inputs and set it to a constant so no changing\n        const { username, email, password, confirmPassowrd } = this.state;\n\n        this.props.firebase.doCreateUserWithEmailAndPassword(email, password)\n            .then(authUser => {\n                // Create the user in the real time database\n                this.props.firebase\n                    .user(authUser.user.uid)\n                    .set({\n                        username,\n                        email,\n                    })\n                    .then(() => {\n                        // Set the state back to the intial default values\n                        this.setState({ ...INITIAL_FORM_STATE });\n\n                        // Redirect now to the chat app\n                        this.props.history.push(ROUTES.CHAT);\n                    })\n                    .catch(error => {\n                        this.setState({ error });\n                    });\n                    \n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n        // Don't refresh/don't let any event do anything.\n        event.preventDefault();\n\n    };\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                </div>\n                <div className=\"col-md-4\">\n                    <div className=\"signup\">\n                        <Errors errors={this.state.error} />\n                        <h4>React Chat App <small>Sign Up</small></h4>\n                        <br />\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <div className=\"signup-form\">\n                                    <form onSubmit={this.onSubmit}>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"username\">Username</label>\n                                            <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" onChange={this.onChange} value={this.state.username} />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"email\">Email</label>\n                                            <input id=\"email\" type=\"email\" name=\"email\" className=\"form-control\" onChange={this.onChange} value={this.state.email} />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"password\">Password</label>\n                                            <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" onChange={this.onChange} value={this.state.password} />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"confirmPassword\">Confirm Password</label>\n                                            <input id=\"confirmPassword\" type=\"password\" name=\"confirmPassword\" className=\"form-control\" onChange={this.onChange} value={this.state.confirmPassword} />\n                                        </div>\n                                        <button type=\"submit\" className=\"btn btn-success btn-block\">Sign Up</button>\n                                        <br />\n                                        <div className=\"text-center\"><p>Already have an account? <a href=\"/\">Login now.</a></p></div>\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-4\">\n                </div>\n            </div>\n        )\n    }\n}\n\n// Wrap the SignUpForm base component in both the withFirebase higher-order component and withRouter\n// To allow us to use Firebase in it, but also to redirect using the router's props sent in with withRouter.\nconst SignUpForm = withRouter(withFirebase(SignUpFormBase));\n\nexport default SignUp;\n\nexport { SignUpForm };","import React, { Component } from 'react'\n\nimport { withRouter } from 'react-router-dom';\n\nimport * as ROUTES from '../../constants/routes';\n\nimport Errors from '../Errors';\n\nimport { withFirebase } from '../Firebase';\nimport { SignUpForm } from '../SignUp';\n\nconst Login = () => (\n    <div>\n        <LoginForm />\n    </div>\n)\n\nconst INITIAL_FORM_STATE = {\n    email: '',\n    password: ''\n}\n\nclass LoginFormBase extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Set the initial state of the form\n        this.state = { ...INITIAL_FORM_STATE };\n    }\n\n    // On change method for the form\n    onChange = event => {\n        // Set the state\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    onSubmit = event => {\n        const {email, password} = this.state;\n\n        // Try log the user in\n        this.props.firebase.doSignInWithEmailAndPassword(email, password)\n            .then(() => {\n                // Set the state back to nothing\n                this.setState({...INITIAL_FORM_STATE});\n\n                // Redirect now to the chat app.\n                this.props.history.push(ROUTES.CHAT);\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n        \n        // Don't refresh/don't let any event do anything.\n        event.preventDefault();\n    }\n\n    render () {\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                </div>\n                <div className=\"col-md-4\">\n                    <div className=\"login\">\n                        <Errors errors={this.state.error} />\n                        <h4>React Chat App <small>Login</small></h4>\n                        <br />\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <div className=\"login-form\">\n                                    <form onSubmit={this.onSubmit}>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"email\">Email</label>\n                                            <input id=\"email\" type=\"email\" name=\"email\" className=\"form-control\" onChange={this.onChange}/>\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"password\">Password</label>\n                                            <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" onChange={this.onChange} />\n                                        </div>\n                                        <button type=\"submit\" className=\"btn btn-success btn-block\">Login</button>\n                                    </form>\n                                    <br />\n                                    <div className=\"text-center\"><p>Don't have an account? <a href=\"/signup\">Sign Up now.</a></p></div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-4\">\n                </div>\n            </div>\n        )\n    }\n}\n\nconst LoginForm = withRouter(withFirebase(LoginFormBase));\n\nexport default Login;\n\nexport { LoginForm };","import React from 'react';\n\nimport { withFirebase } from '../Firebase';\n\nconst SignOut = ({firebase}) => (\n    <button type=\"button\" className=\"btn btn-light\" onClick={firebase.doSignOut}>Sign out</button>\n)\n\nexport default withFirebase(SignOut);","import React, { Component } from 'react'\nimport SignOut from '../SignOut';\n\nclass NavBar extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render () {\n        return (\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n                    <a className=\"navbar-brand\" href=\"#\">React Chat App</a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n                        <ul className=\"navbar-nav mr-auto\">\n                        \n                        </ul>\n                        <span className=\"navbar-text\">\n                            <button type=\"button\" className=\"btn btn-light\">Logged in as {this.props.loggedInAs}</button>\n                            &nbsp;\n                            <SignOut />\n                        </span>\n                    </div>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport { withFirebase } from '../Firebase';\n\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\n\n// This is the \"Extra Credit\" part of the lab, being able to create groups of people.\n\nclass CreateGroup extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            createGroupOpen: false,\n            groupName: '',\n            groupMembers: []\n        }\n\n        // Bind this to the createButtonClicked\n        this.createGroupButtonClicked = this.createGroupButtonClicked.bind(this);\n    }\n\n    createGroupButtonClicked() {\n        this.setState({createGroupOpen: true});\n    }\n\n    createGroup = event => {\n        const {groupName, groupMembers} = this.state;\n\n        // Send it to Firebase using \"push\" for unqiue ids\n        var newGroupRef  = this.props.firebase.group().push();\n\n        // Set the message\n        newGroupRef.set({\n            name: groupName,\n            members: groupMembers\n        });\n\n        this.setState({ groupName: '', groupMembers: [], createGroupOpen: false});\n\n        // Don't refresh/don't let any event do anything.\n        event.preventDefault();\n    }\n\n     // On change method for the form\n    createGroupChange = event => {\n        // Change the groupName\n        if (event.target.name == 'groupName') {\n            this.setState({ groupName: event.target.value});\n        // Add the selected member\n        } else if (event.target.name == 'groupMembers') {\n            var value = [];\n            for (var i = 0, l = event.target.options.length; i < l; i++) {\n                if (event.target.options[i].selected) {\n                    value.push(event.target.options[i].value);\n                }\n            }\n\n            // We also need to add the current user to the group because that is the person creating it.\n            value.push(this.props.loggedInAsID);\n\n            this.setState({groupMembers: value});\n        }\n\n    }\n\n    render () {\n        if(this.state.createGroupOpen) {\n            return (\n                <div>\n                    <div className=\"list-group-item list-group-item-action \" style={{ borderRadius: '0px' }}>\n                        <form onSubmit={this.createGroup}>\n                            <div className=\"form-group\">\n                                <input type=\"text\" name=\"groupName\" class=\"form-control\" placeholder=\"Group Name\" onChange={this.createGroupChange}/>\n                            </div>\n                            <div className=\"form-group\">\n                                <select multiple name=\"groupMembers\" className=\"form-control\" onChange={this.createGroupChange}>\n                                    {this.props.users.map(user => (\n                                        <option value={user.uid}>{user.username}</option>\n                                    ))}\n                                </select>\n                            </div>\n\n                            <button type=\"submit\" className=\"btn btn-secondary btn-block\"><i className=\"fa fa-plus\"></i> Create Group</button>\n                        </form>\n                    </div>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <div className=\"list-group-item list-group-item-action \" style={{ borderRadius: '0px' }}>\n                        <button onClick={this.createGroupButtonClicked} className=\"btn btn-secondary btn-block\"><i className=\"fa fa-plus\"></i> Create Group</button>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default withFirebase(CreateGroup);","import React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom';\nimport { withFirebase } from '../Firebase';\nimport CreateGroup from '../CreateGroup';\n\nclass Users extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            users: [],\n            groups: [],\n            loading: false,\n            currentlySelectedUser: null,\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ loading: true });\n\n        // Get all of the users from Firebase.\n        this.props.firebase.users().orderByChild('email').on('value', snapshot => {\n            const usersObject = snapshot.val();\n\n            // Filter the users first\n            let users = Object.keys(usersObject).map(key => ({\n                ...usersObject[key],\n                uid: key,\n            }));\n            \n            // Filter the users so that the currently logged in user isn't displayed\n            users = users.filter(user => user.email != this.props.loggedInAs);\n\n            this.setState({\n                users: users\n            });\n        });\n\n        // Get all of the groups from Firebase.\n        this.props.firebase.group().on('value', snapshot => {\n            const groupsObject = snapshot.val();\n\n            let groups = Object.keys(groupsObject).map(key => ({\n                ...groupsObject[key],\n                groupId: key,\n            }));\n\n            // Filter the groups so only the ones with this user in it is displayed\n            groups = groups.filter(group => group.members.includes(this.props.loggedInAsID));\n\n            this.setState({groups: groups});\n        });\n    }\n\n    componentWillUnmount() {\n        // Turn off users and groups when component unmounts\n        this.props.firebase.users().off();\n        this.props.firebase.group().off();\n    }\n\n    render () {\n        return (\n            <div className=\"col-md-4\" style={{ marginRight: '0px', paddingRight: '0px' }}>\n                <ul className=\"list-group\" style={{ borderRadius: '0px' }}>\n\n                    <CreateGroup loggedInAsID={this.props.loggedInAsID} users={this.state.users}/>\n                    {\n                        this.state.groups.map(group => (\n                            <a onClick={() => this.props.changeWhoUserIsChattingTo(group.groupId)} className={\"list-group-item list-group-item-action \" + (this.props.currentlySelectedUser == group.groupId ? 'active' : '')} style={{ borderRadius: '0px' }}><h5><i className=\"fa fa-users\"></i> {group.name}<br /></h5></a>\n                        ))\n                    }\n                    {\n                        this.state.users.map(user => (\n                            <a onClick={() => this.props.changeWhoUserIsChattingTo(user.uid)} className={\"list-group-item list-group-item-action \" + (this.props.currentlySelectedUser == user.uid ? 'active' : '')} style={{ borderRadius: '0px' }}><h5><i className=\"fa fa-user\"></i> {user.username}<br /><small>{user.email}</small></h5></a>\n                        ))\n                    }\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default withFirebase(Users);","import React, { Component } from 'react';\n\nimport { withFirebase } from '../Firebase';\n\nimport '../../../node_modules/font-awesome/css/font-awesome.min.css';\n\nclass Message extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    deleteMessage = event => {\n        // Get a reference to that message\n        const messageRef = this.props.firebase.message(event.currentTarget.value);\n        // Remove it\n        messageRef.remove();\n    }\n\n    render () {\n        // Figure out if it is a message from the person logged in or not\n        if(this.props.currentlySelectedUser == this.props.message.from) {\n            // Figure out who the message is from\n            const from = this.props.users.map(user => {\n                if (this.props.currentlySelectedUser == user.uid) {\n                    return user.username;\n                }\n            });\n            return (\n                <div>\n                    <div class=\"float-left\">\n                        <br/>{from}\n                        <div className=\"from-message\">\n                            {this.props.message.body}\n                        </div>\n                        <div className=\"float-left\"><small><i className=\"fa fa-clock-o\"></i> {this.props.message.sentAt}</small></div>\n                    </div>\n                    <br /><br />\n                </div>\n            )\n        } else {\n\n            // Check if the current logged in user is the one it is from. If it is then display it right\n            if(this.props.loggedInAs == this.props.message.from) {\n                // Figure out who the message is from\n                const from = this.props.users.map(user => {\n                    if (this.props.loggedInAs == user.uid) {\n                        return user.username;\n                    }\n                });\n                return (\n                    <div>\n                        <div className=\"float-right\">\n                            <br /><div className=\"float-right\">{from}</div><br />\n                            <div className=\"to-message\">\n                                {this.props.message.body}\n                            </div>\n                            <div className=\"float-right\"><small><i className=\"fa fa-clock-o\"></i> {this.props.message.sentAt} <button className=\"btn btn-secondary btn-sm\" value={this.props.message.messageId} onClick={this.deleteMessage}><i className=\"fa fa-trash\"></i></button></small></div>\n                        </div>\n                        <br /><br />\n                    </div>\n                )\n            } else {\n                // Figure out who the message is from\n                const from = this.props.users.map(user => {\n                    if (this.props.message.from == user.uid) {\n                        return user.username;\n                    }\n                });\n                return (\n                    <div>\n                        <div class=\"float-left\">\n                            <br />{from}\n                            <div className=\"from-message\">\n                                {this.props.message.body}\n                            </div>\n                            <div className=\"float-left\"><small><i className=\"fa fa-clock-o\"></i> {this.props.message.sentAt}</small></div>\n                        </div>\n                        <br /><br />\n                    </div>\n                )\n            }\n        }\n    }\n}\n\nexport default withFirebase(Message)","import React, { Component } from 'react';\nimport '../../custom.css';\n\nimport { withFirebase } from '../Firebase';\n\nimport Message from '../Message';\n\nconst INITIAL_STATE = {\n    message: '',\n    messages: [],\n    userMessages: []\n}\n\nclass ChatWindow extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Set the state to blank\n        this.state = {...INITIAL_STATE};\n    }\n\n    // On change method for the form\n    onChange = event => {\n        // Set the state\n        this.setState({ message: event.target.value });\n    }\n\n    sendMessage = event => {\n        const { message } = this.state;\n        \n        // Send it to Firebase using \"push\" for unqiue ids\n        var newMessageRef  = this.props.firebase.messages().push();\n\n        // Set the message\n        newMessageRef.set({\n            from: this.props.loggedInAs,\n            to: this.props.currentlySelectedUser,\n            body: message,\n            sentAt: new Date().toLocaleString()\n        });\n\n        this.setState({message: ''});\n\n        // Don't refresh/don't let any event do anything.\n        event.preventDefault();\n    }\n\n    componentDidMount() {\n        this.setState({ loading: true });\n\n        // Get the all of the messages from Firebase.\n        this.props.firebase.messages().on('value', snapshot => {\n            const messagesObject = snapshot.val();\n\n            let messages = Object.keys(messagesObject).map(key => ({\n                ...messagesObject[key],\n                messageId: key\n            }));\n\n            this.setState({\n                messages: messages\n            });\n        });\n    }\n\n    render () {\n        if(this.props.currentlySelectedUser == 0) {\n            return (\n                <div className=\"col-md-8\" style={{ marginLeft: '0px', paddingLeft: '0px' }}>\n                <br/><br/>\n                    <div className=\"text-center\">\n                        <h1>Please choose a user to chat to.</h1>\n                    </div>\n                </div>\n            )\n        } else {\n            let userMessages = [];\n            // This is the part of the lab that is the \"Extra Credit Feature\"\n            // It filters messages based on groups and private messages.\n            // The user can create groups with selected users in it.\n            \n            for(let i=0; i<this.state.messages.length; i++) {\n                // Its a group that's selected\n                console.log(this.props.currentlySelectedUser);\n                if (this.props.currentlySelectedUser.startsWith('-LS')) {\n                    if(this.props.currentlySelectedUser == this.state.messages[i].to) {\n                        userMessages.push(this.state.messages[i]);\n                    }\n                } \n                // It's not a group\n                else {\n                    if ((this.state.messages[i].from == this.props.currentlySelectedUser && this.state.messages[i].to == this.props.loggedInAs) || (this.state.messages[i].to == this.props.currentlySelectedUser && this.state.messages[i].from == this.props.loggedInAs)) {\n                        userMessages.push(this.state.messages[i]);\n                    }\n                }\n            }\n            // Everytime we re-render (when props change and when we change user, then we must filter that users messages out)\n\n            return (\n                <div className=\"col-md-8\" style={{ marginLeft: '0px', paddingLeft: '0px' }}>\n                    <div className=\"messages\">\n                        {\n                            userMessages.map(message => (\n                                <Message message={message} loggedInAs={this.props.loggedInAs} users={this.props.users} currentlySelectedUser={this.props.currentlySelectedUser}/>\n                            ))\n                        }\n                    </div>\n                    <div className=\"enterMessage\">\n                        <form onSubmit={this.sendMessage}>\n                            <div className=\"form-group\">\n                                <textarea onChange={this.onChange} className=\"form-control\" placeholder=\"Type a message...\" value={this.state.message}></textarea>\n                                <div className=\"submitMessageButton\">\n                                    <button type=\"submit\" className=\"btn btn-success btn-block\">Send Message</button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default withFirebase(ChatWindow);","// We want to be able to access the auth user in all components so we can do that\n// by \nimport React from 'react';\n\nconst AuthUserContext = React.createContext(null);\n\nexport default AuthUserContext;","import React from 'react';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\nconst withAuthentication = Component => {\n    class WithAuthentication extends React.Component {\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                authUser: null\n            };\n        }\n\n        componentDidMount() {\n            // This listener will be called everytime a user signs up, logs out etc.\n            this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n                // Change the authUser\n                authUser\n                    ? this.setState({ authUser })\n                    : this.setState({ authUser: null });\n            });\n        }\n\n        componentWillUnmount() {\n            this.listener();\n        }\n\n        render() {\n            return (\n                <AuthUserContext.Provider value={this.state.authUser}>\n                    <Component {...this.props} />\n                </AuthUserContext.Provider>\n            );\n        }\n    }\n    return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nimport { AuthUserContext } from '../Session';\n\nconst withAuthorization = condition => Component => {\n    class WithAuthorization extends React.Component {\n        componentDidMount() {\n            this.listener = this.props.firebase.auth.onAuthStateChanged(\n                authUser => {\n                    // If the user is not logged in the redirect to the login.\n                    if (!condition(authUser)) {\n                        this.props.history.push(ROUTES.LOGIN);\n                    }\n                },\n            );\n        }\n\n        componentWillUnmount() {\n            this.listener();\n        }\n\n        render() {\n            return (\n                <AuthUserContext.Consumer>\n                    {authUser =>\n                        condition(authUser) ? <Component {...this.props} /> : null\n                    }\n                </AuthUserContext.Consumer>\n            );\n        }\n    }\n\n    return compose(\n        withRouter,\n        withFirebase,\n    )(WithAuthorization);\n};\n\nexport default withAuthorization;","import React, { Component } from 'react';\n\nimport SignOut from '../SignOut';\n\nimport NavBar from '../NavBar';\nimport Users from '../Users';\nimport ChatWindow from '../ChatWindow';\n\n\nimport { AuthUserContext } from '../Session';\n\nimport { withAuthorization } from '../Session';\n\nlet currentlySelectedUser = 0;\n\nclass Chat extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            users: [],\n            currentlySelectedUser: 0\n        }\n    }\n\n    // Use state to keep track of who the user is talking to\n    changeWhoUserIsChattingTo = id => {\n        this.setState({ currentlySelectedUser: id });\n    }\n\n    componentDidMount() {\n        this.setState({ loading: true });\n\n        // Get all of the users from Firebase.\n        this.props.firebase.users().orderByChild('email').on('value', snapshot => {\n            const usersObject = snapshot.val();\n\n            // Filter the users first\n            let users = Object.keys(usersObject).map(key => ({\n                ...usersObject[key],\n                uid: key,\n            }));\n\n            this.setState({\n                users: users\n            });\n        });\n    }\n\n    render() {\n        return (\n            <AuthUserContext.Consumer>\n                {authUser => (\n                    <div>\n                        <NavBar loggedInAs={authUser.email} />\n                        <div className=\"row\">\n                            <Users loggedInAs={authUser.email} loggedInAsID={authUser.uid} changeWhoUserIsChattingTo={this.changeWhoUserIsChattingTo} currentlySelectedUser={this.state.currentlySelectedUser} />\n                            <ChatWindow users={this.state.users} loggedInAs={authUser.uid} loggedInAsUsername={authUser} currentlySelectedUser={this.state.currentlySelectedUser}/>\n                        </div>\n                    </div>\n                )}\n            </AuthUserContext.Consumer>\n        )\n    }\n}\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(Chat);","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport * as ROUTES from './constants/routes';\n\n// Pages as Components\nimport Login from './components/Login';\nimport SignUp from './components/SignUp';\nimport Chat from './components/Chat';\n\n// Firebase\nimport { withFirebase } from '../src/components/Firebase';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap.min.js';\nimport './App.css';\n\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\n\n// Auth User Context to access the users session\nimport { AuthUserContext, withAuthentication } from './components/Session';\n\n// Configure dotenv\nrequire('dotenv').config();\n\nconst App = () => (\n  <Router>\n    <div>\n      <Route exact path={ROUTES.LOGIN} component={Login} />\n      <Route exact path={ROUTES.SIGN_UP} component={SignUp} />\n      <Route exact path={ROUTES.CHAT} component={Chat} />\n    </div>\n  </Router>\n);\n\nexport default withAuthentication(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// Import Firebase and the FirebaseContext used to access the Firebase instance.\nimport Firebase, { FirebaseContext } from './components/Firebase';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<FirebaseContext.Provider value={new Firebase()}><App /></FirebaseContext.Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}